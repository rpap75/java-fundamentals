/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    // Roll
    public int[] roll(int n) {
        Random rand = new Random();
        int[] diceNum = new int[n];
        for (int i = 0; i < n; i++) {
            int randNum = rand.nextInt(3);
            diceNum[i] = randNum + 1;
        }
        return diceNum;
    }

    public boolean containsDuplicates(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 1; j < array.length; j++) {
                if (i == j) continue;
                if (array[i] == array[j])
                    return true;
            }
        }
        return false;
    }


    //Caculating Averages
    public static int calculateAverage(int[] arrayOfValues) {
        int sum = 0;
        int arrayLength = arrayOfValues.length;
//FOR LOOP
        for (int i = 0; i < arrayOfValues.length; i++) {
            //every iteration we add value to sum
            sum = sum + arrayOfValues[i];
        }
        //sum of all values / length of array
        return (sum / arrayLength);
    }

//    public class App {
//        static int[][] weeklyMonthTemperatures = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//    }


    //Arrays of Arrays
    public static int[] lowestAverageArray(int[][] weeklyMonthTemperatures) {
        int[] lowestAverageArray = weeklyMonthTemperatures[0];
        int lowestAverage = calculateAverage(weeklyMonthTemperatures[0]);
        for (int i = 0; i < weeklyMonthTemperatures.length; i++) {
            int currentArrayAverage = calculateAverage(weeklyMonthTemperatures[i]);
            if (currentArrayAverage < lowestAverage) {
                lowestAverageArray = weeklyMonthTemperatures[i];
            }
        }
        return lowestAverageArray;
    }

//    public int findAverageOfArray(int[] array){
//        return 0;
//    }

    // Analyzing Weather Data
    public String weather(int[][] arr) {
        String output = "";
        int highTemp = arr[0][0];
        int lowTemp = arr[0][0];
        HashSet<Integer> weatherData = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] > highTemp)
                    highTemp = arr[i][j];
                if (arr[i][j] < lowTemp)
                    lowTemp = arr[i][j];
                weatherData.add(arr[i][j]);
            }
        }
        System.out.println("High: " + highTemp);
        System.out.println("Low: " + lowTemp);
        for (int i = lowTemp; i <= highTemp; i++) {
            if (weatherData.contains(i))
                output += i + " ";
            else
                System.out.println("Never saw temperature: " + i);
        }
        return output;
    }

    // Tally
    public String tally(List<String> arr) {
        HashMap<String, Integer> votes = new HashMap<>();
        int numVotes = 0;
        String elected = "";

        for (String vote : arr) {
            if (votes.containsKey(vote)) {
                votes.put(vote, votes.get(vote) + 1);
            } else {
                votes.put(vote, 1);
            }
            for (String candidate : arr) {
                if (votes.get(vote) > numVotes) {
                    numVotes = votes.get(vote);
                    elected = vote;
                }
            }
        }
        return elected;
    }
}
